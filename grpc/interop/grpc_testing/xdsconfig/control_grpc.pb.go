// Copyright 2024 gRPC authors.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.4.0
// - protoc             v3.21.12
// source: control.proto

package xdsconfig

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	XdsConfigControlService_StopOnRequest_FullMethodName   = "/grpc.testing.xdsconfig.XdsConfigControlService/StopOnRequest"
	XdsConfigControlService_UpsertResources_FullMethodName = "/grpc.testing.xdsconfig.XdsConfigControlService/UpsertResources"
)

// XdsConfigControlServiceClient is the client API for XdsConfigControlService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type XdsConfigControlServiceClient interface {
	StopOnRequest(ctx context.Context, in *StopOnRequestRequest, opts ...grpc.CallOption) (*StopOnRequestResponse, error)
	UpsertResources(ctx context.Context, in *UpsertResourcesRequest, opts ...grpc.CallOption) (*UpsertResourcesResponse, error)
}

type xdsConfigControlServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewXdsConfigControlServiceClient(cc grpc.ClientConnInterface) XdsConfigControlServiceClient {
	return &xdsConfigControlServiceClient{cc}
}

func (c *xdsConfigControlServiceClient) StopOnRequest(ctx context.Context, in *StopOnRequestRequest, opts ...grpc.CallOption) (*StopOnRequestResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StopOnRequestResponse)
	err := c.cc.Invoke(ctx, XdsConfigControlService_StopOnRequest_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *xdsConfigControlServiceClient) UpsertResources(ctx context.Context, in *UpsertResourcesRequest, opts ...grpc.CallOption) (*UpsertResourcesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpsertResourcesResponse)
	err := c.cc.Invoke(ctx, XdsConfigControlService_UpsertResources_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// XdsConfigControlServiceServer is the server API for XdsConfigControlService service.
// All implementations must embed UnimplementedXdsConfigControlServiceServer
// for forward compatibility
type XdsConfigControlServiceServer interface {
	StopOnRequest(context.Context, *StopOnRequestRequest) (*StopOnRequestResponse, error)
	UpsertResources(context.Context, *UpsertResourcesRequest) (*UpsertResourcesResponse, error)
	mustEmbedUnimplementedXdsConfigControlServiceServer()
}

// UnimplementedXdsConfigControlServiceServer must be embedded to have forward compatible implementations.
type UnimplementedXdsConfigControlServiceServer struct {
}

func (UnimplementedXdsConfigControlServiceServer) StopOnRequest(context.Context, *StopOnRequestRequest) (*StopOnRequestResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StopOnRequest not implemented")
}
func (UnimplementedXdsConfigControlServiceServer) UpsertResources(context.Context, *UpsertResourcesRequest) (*UpsertResourcesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpsertResources not implemented")
}
func (UnimplementedXdsConfigControlServiceServer) mustEmbedUnimplementedXdsConfigControlServiceServer() {
}

// UnsafeXdsConfigControlServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to XdsConfigControlServiceServer will
// result in compilation errors.
type UnsafeXdsConfigControlServiceServer interface {
	mustEmbedUnimplementedXdsConfigControlServiceServer()
}

func RegisterXdsConfigControlServiceServer(s grpc.ServiceRegistrar, srv XdsConfigControlServiceServer) {
	s.RegisterService(&XdsConfigControlService_ServiceDesc, srv)
}

func _XdsConfigControlService_StopOnRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StopOnRequestRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(XdsConfigControlServiceServer).StopOnRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: XdsConfigControlService_StopOnRequest_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(XdsConfigControlServiceServer).StopOnRequest(ctx, req.(*StopOnRequestRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _XdsConfigControlService_UpsertResources_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpsertResourcesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(XdsConfigControlServiceServer).UpsertResources(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: XdsConfigControlService_UpsertResources_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(XdsConfigControlServiceServer).UpsertResources(ctx, req.(*UpsertResourcesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// XdsConfigControlService_ServiceDesc is the grpc.ServiceDesc for XdsConfigControlService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var XdsConfigControlService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "grpc.testing.xdsconfig.XdsConfigControlService",
	HandlerType: (*XdsConfigControlServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "StopOnRequest",
			Handler:    _XdsConfigControlService_StopOnRequest_Handler,
		},
		{
			MethodName: "UpsertResources",
			Handler:    _XdsConfigControlService_UpsertResources_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "control.proto",
}
